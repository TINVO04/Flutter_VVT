// üìù B√†i t·∫≠p √°p d·ª•ng ki·∫øn th·ª©c n√¢ng cao v·ªÅ Map
// B√†i t·∫≠p 1: C·∫≠p nh·∫≠t v√† x√≥a nhi·ªÅu ph·∫ßn t·ª≠ trong danh b·∫°
// Vi·∫øt ch∆∞∆°ng tr√¨nh qu·∫£n l√Ω danh b·∫° ƒëi·ªán tho·∫°i, cho ph√©p:

// Th√™m li√™n h·ªá m·ªõi (n·∫øu ch∆∞a c√≥).
// C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i n·∫øu li√™n h·ªá ƒë√£ t·ªìn t·∫°i.
// X√≥a t·∫•t c·∫£ li√™n h·ªá c√≥ s·ªë ƒëi·ªán tho·∫°i b·∫Øt ƒë·∫ßu b·∫±ng "090".
// In danh s√°ch danh b·∫° sau khi c·∫≠p nh·∫≠t.

import 'dart:io';

void main() {
  Map<String, String> phoneBook = {};

  while (true) {
    print("\nüìû QU·∫¢N L√ù DANH B·∫†");
    print("1. Th√™m li√™n h·ªá m·ªõi (N·∫øu ch∆∞a c√≥)");
    print("2. C·∫≠p nh·∫≠t sdt ");
    print("3. Hi·ªÉn th·ªã danh b·∫°");
    print("4. X√≥a li√™n h·ªá c√≥ sdt b·∫Øt ƒë√¢u b·∫±ng.");
    print("5. Tho√°t");
    stdout.write("Ch·ªçn ch·ª©c nƒÉng: ");

    String choice = stdin.readLineSync() ?? '';

    switch (choice) {
      case '1':
        addContact(phoneBook);
        break;
      case '2':
        updateContact(phoneBook);
        break;
      case '3':
        showContacts(phoneBook);
        break;
      case '4':
        removeChoiceContacts(phoneBook);
        break;
      case '5':
        print('Tho√°t ch∆∞∆°ng tr√¨nh');
        return;
      default:
        print('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng ch·ªçn l·∫°i. ');
    }
  }
}

//Th√™m li√™n h·ªá m·ªõi n·∫øu ch∆∞a c√≥
void addContact(Map<String, String> phoneBook) {
  stdout.write('Nhap ten Lien He: ');
  String name = stdin.readLineSync() ?? '';
  stdout.write('Nhap so dien thoai: ');
  String phone = stdin.readLineSync() ?? '';

  if (!phoneBook.containsKey(name)) {
    phoneBook[name] = phone;
    print('Them Lien He $name Thanh Cong!!!');
  } else {
    print('Lien He Da Co Trong Danh Ba ');
  }
}

//C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i, n·∫øu t√™n ƒë√£ t·ªìn t·∫°i th√¨ update
void updateContact(Map<String, String> phoneBook) {
  stdout.write('Nh·∫≠p t√™n ng∆∞·ªùi c·∫ßn c·∫≠p nh·∫≠t: ');
  String name = stdin.readLineSync() ?? '';

  if (phoneBook.containsKey(name)) {
    stdout.write(
      'Li√™n H·ªá $name c√≥ s·ªë ${phoneBook[name]} b·∫°n mu·ªën thay ƒë·ªïi s·ªë m·ªõi l√†: ',
    );
    String phone = stdin.readLineSync() ?? '';
    phoneBook.update(name, (phone) => phone);
    print('ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng !!');
  } else {
    print('Li√™n h·ªá kh√¥ng t·ªìn t·∫°i!!');
  }
}

//x√≥a c√°c s·ªë b·∫Øt ƒë·∫ßu b·∫±ng t√πy ch·ªânh
void removeChoiceContacts(Map<String, String> phonebook) {
  stdout.write('S·ªë c·∫ßn x√≥a b·∫Øt ƒë·∫ßu b·∫±ng: ');
  String rmvPhone = stdin.readLineSync() ?? '';

  phonebook.removeWhere((key, phone) => phone.startsWith(rmvPhone));
}

//in danh sach
void showContacts(Map<String, String> phoneBook) {
  if (phoneBook.isEmpty) {
    print('Danh Ba Trong !!');
  } else {
    phoneBook.forEach((name, phone) {
      print('- $name: $phone');
    });
  }
}
